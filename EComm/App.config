<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="FastFoodPOS.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
        </sectionGroup>
    </configSections>
    <connectionStrings>
        <add name="FastFoodPOS.Properties.Settings.FastFoodDatabaseConnectionString" connectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=|DataDirectory|\FastFoodDatabase.accdb;Persist Security Info=True" providerName="System.Data.OleDb"/>
    </connectionStrings>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8"/>
    </startup>
    <appSettings>
      <!-- ENTER THE PASSWORD HERE -->
      <add key="Password" value="FFPSPASSWORD"/>

      <add key="DbProvider" value="System.Data.SqlClient"/>
      <add key="ConnectionString" value="Data Source=DESKTOP-7D6QQ5C\SQLEXPRESS;
                           Initial Catalog=EComm3DB;
                           User ID=sa;
                           Password=1122;
                           TrustServerCertificate=True;"/>

      <!-- 
      MYSQL DATABASE IS NOW SUPPORTED
      Just CONFIGURE THE DATABASE Connection below FIRST then CHANGE the DbProvider to MYSQL
      Note: The tables will be automatically imported
      -->
      <add key="host" value="DESKTOP-7D6QQ5C\\SQLEXPRESS"/>
      <add key="user" value="sa"/>
      <add key="pass" value="1122"/>
      <add key="db" value="EComm3DB"/>
    </appSettings>

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <!-- Dont Change anything here -->
  <applicationSettings>
        <FastFoodPOS.Properties.Settings>
              <setting name="MySQLTables" serializeAs="String">
                    <value>
<!-- TABLE IF NOT EXISTS `orders` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `product_id` int(11) NOT NULL,
  `transaction_id` varchar(256) NOT NULL,
  `quantity` int(11) NOT NULL,
  `price` decimal(10,2) NOT NULL,
  PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


CREATE TABLE IF NOT EXISTS `products` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(256) NOT NULL,
  `category` varchar(256) NOT NULL,
  `price` decimal(10,2) NOT NULL,
  `is_available` tinyint(1) NOT NULL,
  `image` varchar(256) NOT NULL,
  `is_deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


CREATE TABLE IF NOT EXISTS `transactions` (
  `id` varchar(256) NOT NULL,
  `user_id` int(11) NOT NULL,
  `date_created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `cash` decimal(10,2) NOT NULL,
  PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


CREATE TABLE IF NOT EXISTS `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `fullname` varchar(256) NOT NULL,
  `email` varchar(256) NOT NULL,
  `role` varchar(256) NOT NULL,
  `password` varchar(256) NOT NULL,
  `image` varchar(256) NOT NULL,
  `is_deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


CREATE OR REPLACE VIEW `OrderTotal` AS
SELECT transaction_id, SUM(price*quantity) AS total, Sum(quantity) AS orders
FROM orders
GROUP BY transaction_id;


CREATE OR REPLACE VIEW `TransactionsView` AS
SELECT transactions.*, OrderTotal.total, OrderTotal.orders
FROM transactions INNER JOIN OrderTotal ON transactions.id=OrderTotal.transaction_id;


CREATE OR REPLACE VIEW `SalesView` AS
SELECT Sum(TransactionsView.total) AS Sale, date_created AS day, Sum(TransactionsView.orders) AS total_order, Count(TransactionsView.id) AS total_customer
FROM TransactionsView
GROUP BY day
ORDER BY day; -->
						
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'orders') AND type = N'U')
BEGIN
    CREATE TABLE orders (
        id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
        product_id INT NOT NULL,
        transaction_id NVARCHAR(256) NOT NULL,
        quantity INT NOT NULL,
        price DECIMAL(10,2) NOT NULL
    );
END;

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'products') AND type = N'U')
BEGIN
    CREATE TABLE products (
        id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
        name NVARCHAR(256) NOT NULL,
        category NVARCHAR(256) NOT NULL,
        price DECIMAL(10,2) NOT NULL,
        is_available BIT NOT NULL,
        image NVARCHAR(256) NOT NULL,
        is_deleted BIT NOT NULL DEFAULT 0
    );
END;

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'transactions') AND type = N'U')
BEGIN
    CREATE TABLE transactions (
        id NVARCHAR(256) NOT NULL PRIMARY KEY,
        user_id INT NOT NULL,
        date_created DATETIME NOT NULL DEFAULT GETDATE(),
        cash DECIMAL(10,2) NOT NULL
    );
END;

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'users') AND type = N'U')
BEGIN
    CREATE TABLE users (
        id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
        fullname NVARCHAR(256) NOT NULL,
        email NVARCHAR(256) NOT NULL,
        role NVARCHAR(256) NOT NULL,
        password NVARCHAR(256) NOT NULL,
        image NVARCHAR(256) NOT NULL,
        is_deleted BIT NOT NULL DEFAULT 0
    );
END;

IF OBJECT_ID(N'OrderTotal', N'V') IS NOT NULL
DROP VIEW OrderTotal;

CREATE VIEW OrderTotal AS
SELECT 
    transaction_id, 
    SUM(price * quantity) AS total, 
    SUM(quantity) AS orders
FROM orders
GROUP BY transaction_id;

IF OBJECT_ID(N'TransactionsView', N'V') IS NOT NULL
DROP VIEW TransactionsView;

CREATE VIEW TransactionsView AS
SELECT 
    transactions.*, 
    OrderTotal.total, 
    OrderTotal.orders
FROM transactions
INNER JOIN OrderTotal ON transactions.id = OrderTotal.transaction_id;

IF OBJECT_ID(N'SalesView', N'V') IS NOT NULL
DROP VIEW SalesView;


CREATE VIEW SalesView AS
SELECT 
    SUM(TransactionsView.total) AS Sale, 
    CAST(TransactionsView.date_created AS DATE) AS day, 
    SUM(TransactionsView.orders) AS total_order, 
    COUNT(TransactionsView.id) AS total_customer
FROM TransactionsView
GROUP BY CAST(TransactionsView.date_created AS DATE);



</value>
              </setting>
        </FastFoodPOS.Properties.Settings>
    </applicationSettings>
</configuration>
